#!/usr/bin/env python3
"""
Script de v√©rification pour le d√©ploiement de Gold 7 Car Rent
"""

import os
import sys

def check_file(filename, description):
    """V√©rifie si un fichier existe"""
    if os.path.exists(filename):
        print(f"‚úÖ {filename} - {description}")
        return True
    else:
        print(f"‚ùå {filename} - {description} (MANQUANT)")
        return False

def check_content(filename, required_content, description):
    """V√©rifie si un fichier contient le contenu requis"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            content = f.read()
            if required_content in content:
                print(f"‚úÖ {filename} contient {description}")
                return True
            else:
                print(f"‚ö†Ô∏è  {filename} ne contient pas {description}")
                return False
    except FileNotFoundError:
        print(f"‚ùå {filename} non trouv√©")
        return False

def main():
    print("üîç V√©rification des fichiers pour le d√©ploiement")
    print("=" * 50)
    
    all_good = True
    
    # Fichiers essentiels
    essential_files = [
        ("app.py", "Application Flask principale"),
        ("requirements.txt", "D√©pendances Python"),
        ("templates/base.html", "Template de base"),
        ("templates/login.html", "Page de connexion"),
        ("static/style.css", "Styles CSS"),
        ("static/images/logo.svg", "Logo de l'application")
    ]
    
    print("\nüìÅ Fichiers essentiels:")
    for filename, description in essential_files:
        if not check_file(filename, description):
            all_good = False
    
    # Fichiers de d√©ploiement
    deployment_files = [
        ("Procfile", "Configuration Heroku"),
        ("runtime.txt", "Version Python"),
        ("vercel.json", "Configuration Vercel"),
        ("app.yaml", "Configuration Google App Engine"),
        (".gitignore", "Fichiers √† ignorer"),
        ("README.md", "Documentation")
    ]
    
    print("\nüöÄ Fichiers de d√©ploiement:")
    for filename, description in deployment_files:
        if not check_file(filename, description):
            all_good = False
    
    # V√©rifications de contenu
    print("\nüîç V√©rifications de contenu:")
    
    # V√©rifier requirements.txt
    check_content("requirements.txt", "gunicorn", "gunicorn pour le d√©ploiement")
    
    # V√©rifier app.py
    check_content("app.py", "PORT", "configuration du port pour l'h√©bergement")
    check_content("app.py", "gold72025car", "identifiants de connexion")
    
    # V√©rifier Procfile
    check_content("Procfile", "web: python app.py", "commande de d√©marrage")
    
    print("\n" + "=" * 50)
    
    if all_good:
        print("üéâ TOUT EST PR√äT POUR LE D√âPLOIEMENT !")
        print("\nOptions de d√©ploiement recommand√©es:")
        print("1. Vercel (le plus simple)")
        print("2. Heroku (le plus complet)")
        print("3. Railway (moderne)")
        print("\nConsultez DEPLOIEMENT_RAPIDE.md pour les instructions d√©taill√©es.")
    else:
        print("‚ö†Ô∏è  CERTAINS FICHIERS SONT MANQUANTS")
        print("Assurez-vous que tous les fichiers sont pr√©sents avant le d√©ploiement.")
    
    print("\nüîë Identifiants de connexion:")
    print("Code d'acc√®s: gold72025car")
    print("Mot de passe: gold72025car")

if __name__ == "__main__":
    main()
